#+TITLE: Portfolio
#+AUTHOR: Bennett Mertz

* Indoor Automated Garden
  A year ago my best friend's mom passed away. My friend had already moved out on her own, but wanted to hold onto her childhood apartment. So I moved into the Bronx after graduating from Recurse Center and college, so that she could keep her apartment in her name. I wanted to have a garden but needed to reside in the city for my transgender services at Mount Sinai and brainstormed ways to create the garden of my dreams inside a northern exposure apartment in the middle of a food desert and green desert.


  My garden started humbly with some led grow lights and two little ghost pepper plants. I took the last shelf off my book shelf and hung the lights.
[[./public/begining.JPG]]

Soon I added in an arduino controlled relay (in the box) to turn the lights on and off at set times each day. The program controlling it was simply doing a delay() for 12 hours. Not the most robust system, and it reset the program timer anytime the power reset, which was frequent with storms and sloppy cord management :)
s[[./public/automatedlights.JPG]]


A bell pepper coming in! By this point I added in a rtc_ds1307 real time clock to keep a battery powered time store that wouldn't reset in the case of power failures as the simple arduino program I wrote would.
[[./public/bellpepper.JPG]]

Next I added in watering, using an old paint bucket and a step drill bit I fit a hose connector to the bucket. This proved to be leaky and was eventually replaced with a proper gasget.
[[./public/constructingwatering1.JPG]]

Pictured are my two black mulberry cuttings which sent out roots :)
[[./public/graftedmulberry.JPG]]

Here is my white mulberry grown from seeds taken on my street, just like in Iran!
[[./public/mulberry.JPG]]

* Linux RICE [[https://github.com/bcmertz/dotfiles][(Github)]]
  I run Arch Linux with a completely customized userspace that has tight integration and command keystroke parity between emacs, terminal, and various unix utilities. Pictured below is my i3 wm setup
  [[./public/rice.png]]
** Overview
   There is too much to cover but here are links to some of the important areas of code and scripts I've written
   - [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/dmenu/choose_keyboard][Internationalization]] - this script queries the installed keyboards and sets a toggle-able keyboard with the default en keyboard
   - [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/cron/setbg][Set Background]] - this script is run as a cron job to change the wallpaper every hour to a random wallpaper. If invoked manually you can pass the -s flag to keep the wallpaper the same. Additionally you can pass a wallpaper name to choose specifically which wallpaper is desired.
   - [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/setup/backuppass][Passwords & GPG Keys]] - this script backs up encrypted passwords and GPG keys and [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/setup/setuppass][this script]] clones them to a new/broken machine
   - [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/killport][Kill Port utility]] - to kill whatever process is runnign on a specific port. Very useful when node bugs out
   - [[https://github.com/bcmertz/dotfiles/blob/master/.local/bin/git_alias][Git alias]] - this utility allows me to use git commands in my home folder as it is version controlled as a bare git repository. This means all my dotfiles are always version controlled without any fancy scripts or tools, just git
   - [[https://github.com/bcmertz/dotfiles/blob/master/.xprofile][Startup applications]]: this runs when Xorg starts up and checks to see which DE/WM is being used and starts the appropriate applications
   - [[https://github.com/bcmertz/dotfiles/blob/master/.profile#L24-L57][Here we choose the session window manager and pass the info]] to .xinitrc which sets the SESSION environmental variable used elsewhere

* Open Source Coding Projects
  Open source is incredibly important to me, and I make every piece of software I write open souce and freely liscenced. Below are three of my favorite projects I've written over the last few years.
** Search Within Video ([[https://github.com/bcmertz/videosearch][Github]] [[http://www.searchwithinvideo.com/][Website]])
   Search Within Video allows you to upload a video or provide a youtube url that is downloaded and analyzed using OpenCV to see which frames are statistically most unique based off of mean squared error comparisons to the previous frame. These unique frames are then uploaded to an open source image classifier, and the results are returned to the user in the form of a searchable video. The user can search for an object such as "dog" and the video will load the timestamp of any dog occurence.

   This project has a microservice architecture and runs the video parser and image classifier on a python backend and the webpage off a node server.
** Ray Tracer ([[https://github.com/bcmertz/ray-tracer][Github]])
   Pictured below is the sample output from my ray tracer. It can render shapes at different depths, with variable lighting and backgrounds. Shadows don't work properly but there should be support soon.
   [[./public/ray-tracer.ppm]]
** Steganographic Encoder ([[https://github.com/bcmertz/steganographic-encoder][Github]])
   This project somewhat sloppily hides messages and decodes them from pictures using least significant bit manipulation.
* Emacs Build ([[https://github.com/bcmertz/dotfiles/tree/master/.emacs.d][Github]])
  Emacs is the ideal extensible editor for all types of plain text, including code and latex. My custom build includes support for many useful tools including vim emulation, email, autocompletion, compilation, and many tweaks that make windowing inside of emacs work like it does in my window manager of choice i3. My custom build features 8 language configurations and 14 general purpose modules that configure everything from git support to editing
  [[./public/emacs-org-mode.png]]
** Measuring startup time
   Startup performance of my custom build is monitored very closely. [[https://github.com/bcmertz/dotfiles/blob/master/.emacs.d/init.el#L22-L27][Here]] I implement a module timer to track perfomance / load time of each custom module.
   #+BEGIN_SRC emacs-lisp
   ;; debug startup performance / load time using (measure-time(load "custom-module.el"))
(defmacro measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "%.06f" (float-time (time-since time)))))
#+END_SRC

** Emacs as window manager
   Emacs is very nearly an entire OS in it's own right. I use it as my window manager while programming for a distraction free environment tightly configured with multi-language integration.
   #+BEGIN_SRC emacs-lisp
     ;; emacs as window manager
     (setq session (getenv "SESSION"))
     (if (equal session "emacs")
         (progn
           (message "managing windows")
           (load "custom-exwm-config.el")
           )
       )
#+END_SRC

** Org Mode
   This portfolio is written in an org document and exported to html, to see the original org text go [[https://github.com/bcmertz/bcmertz.github.io/blob/master/index.org][here]]

   I use org mode to track my list of todo items, and have built in functionality like reviewing github pull requests from inside of emacs/org-mode as configured [[https://github.com/bcmertz/dotfiles/blob/master/.emacs.d/lisp/languages/custom-org.el#L11-L18][here]]
** Latex dev environment and resume
   Within emacs I have setup a dev environment for editing [[https://github.com/bcmertz/dotfiles/blob/master/.emacs.d/lisp/languages/custom-latex.el][latex]] with automatic compilation to pdf. Checkout my [[https://github.com/bcmertz/resume/blob/master/resume.pdf][resume]] written in Latex.
   [[./public/emacs-resume.png]]
